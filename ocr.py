# -*- coding: utf-8 -*-
"""OCR.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14YOgSRx2Qj-LBLbFDPViMHLlOFlGeJcG
"""

# Installer
#!sudo apt-get install tesseract-ocr
#!pip install pytesseract
#!pip install python-dateutil

import os
import json
import cv2
import numpy as np
from PIL import Image as Img
import pytesseract as pyt
import re
from dateutil import parser

#from google.colab import drive
#drive.mount('/content/drive')

pyt.pytesseract.tesseract_cmd = '/usr/bin/tesseract'

desired_format = "%Y/%m/%d"
image_dir = "/content/drive/MyDrive/PaymentReceipt/dataset/val/KBZ"

# Regular expression patterns for extracting fields
transtype_pattern = re.compile(r"(Transaction Type|Type)\s?:?\s?(.+)")
notes_pattern = re.compile(r"(Notes|Note|Purpose)\s?:?\s?(.+)")
transtime_pattern = re.compile(r"(Transaction Time|Date and Time|Date & Time)\s?:?\s?(.+)")
transno_pattern = re.compile(r"(Transaction No|Transaction ID)\s?:?\s?(.+)")
receiver_pattern = re.compile(r"(To|Receiver Name|Send To)\s?:?\s?(.+)")
sender_pattern = re.compile(r"(From|Sender Name|Send From)\s?:?\s?(.+)")
amount_data_pattern = re.compile(r"(Amount|Total Amount)\s?:?\s?(.+)")
numeric_pattern = re.compile(r"-?(\d+(?:\.\d{2})?)")
date_time_pattern = re.compile(r"(\d{1,2}[/-]\d{1,2}[/-]\d{2,4}|\d{1,2} \w+ \d{4})[\s+]*([0-9:AMP]+)?")


def extract_text_from_image(image_path):
    """
    Extracts text from an image using Tesseract OCR.

    :param image_path: Path to the image file
    :return: Extracted text as a string, or None if extraction fails
    """
    try:
        # Read the image using OpenCV
        img = cv2.imread(image_path)

        if img is None:
            raise ValueError(f"Failed to read image: {image_path}")

        # Convert the image to grayscale
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

        # Apply a Gaussian blur to reduce noise and smoothen the image
        blurred = cv2.GaussianBlur(gray, (3, 3), 0)

        # Increase contrast using adaptive histogram equalization (CLAHE)
        clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8, 8))
        enhanced_img = clahe.apply(blurred)

        # Sharpen the image to make text more readable
        kernel = np.array([[0, -1, 0], [-1, 5, -1], [0, -1, 0]])
        sharpened = cv2.filter2D(enhanced_img, -1, kernel)

        # Apply a threshold to convert the image to binary (black and white)
        # Adjust the threshold value to ensure better extraction of gray text
        _, thresh = cv2.threshold(sharpened, 150, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)

        # Convert back to a PIL image
        pil_image = Img.fromarray(thresh)

        # Use Tesseract to do OCR on the image
        config = "--psm 6" 
        text = pyt.image_to_string(pil_image, config=config, lang='eng')
        return text
    
    except Exception as e:
        print(f"Error processing image {image_path}: {e}")
        return None

# Split text into lines
def split_text_into_lines(text):
    lines = text.split('\n')
    return [line.strip() for line in lines if line.strip()]

# Convert any date format to a desired format
def convert_date_format(date_str):
    try:
        # Parse the date string into a datetime object
        date_obj = parser.parse(date_str)

        # Format the date object into the desired format
        formatted_date = date_obj.strftime(desired_format)
        return formatted_date
    except Exception as e:
        return f"Error parsing date: {e}"

def extract_transaction_data(text):
    
    transaction_data = {
        "Transaction No" : None,
        "Date": None,
        "Time": None,
        "Transaction Time" : None,
        "Transaction Type": None,
        "Sender Name": None,
        "Amount": None,
        "Receiver Name": None,
        "Notes": None
    }
    lines = split_text_into_lines(text)
    for line in lines:        
        # Transaction Time
        if re.search(transtime_pattern, line):
            transtime_pattern_match = transtime_pattern.search(line)
            date_time_str  = transtime_pattern_match.group(2).strip()
            transaction_data["Transaction Time"] = date_time_str
            match = date_time_pattern.search(date_time_str)
            date_part = match.group(1)  # Extract the date part
            time_part = match.group(2) if match.group(2) else "No time provided"  
            transaction_data["Date"] = date_time_str
            #transaction_data["Date"] = convert_date_format(date_time_str)
            # Split the string into date and time parts
            '''date_part, time_part = date_time_str.split()
            transaction_data["Date"] = convert_date_format(date_part)'''
            transaction_data["Time"] = time_part
        
        # Transaction No  
        elif re.search(transno_pattern, line):
             transno_pattern_match = transno_pattern.search(line)
             transaction_data["Transaction No"] = transno_pattern_match.group(2).strip()
        
        # transaction_type_pattern
        elif re.search(transtype_pattern, line):
             transtype_pattern_match = transtype_pattern.search(line)
             transaction_data["Transaction Type"] = transtype_pattern_match.group(2).strip()

        # Sender Name 
        elif re.search(sender_pattern, line):
             sender_pattern_match = sender_pattern.search(line)
             transaction_data["Sender Name"] = sender_pattern_match.group(2).strip()

        # Receiver Name 
        elif re.search(receiver_pattern, line):
             receiver_pattern_match = receiver_pattern.search(line)
             transaction_data["Receiver Name"] = receiver_pattern_match.group(2).strip()

        # Amounts
        elif re.search(amount_data_pattern, line):
             amount_data_pattern_match = amount_data_pattern.search(line)
             amount_string = amount_data_pattern_match.group(2).strip()
             amount_pattern_match =numeric_pattern.search(amount_string)
             transaction_data["Amount"] = amount_pattern_match.group(1).strip()

        # Notes
        elif re.search(notes_pattern, line):
            notes_match = notes_pattern.search(line)
            transaction_data["Notes"] = notes_match.group(2).strip()

    return transaction_data


# Process images and save extracted data to JSON
all_transactions = []

for filename in os.listdir(image_dir):
    if filename.lower().endswith(('.png', '.jpg', '.jpeg')):
        image_path = os.path.join(image_dir, filename)

        try:
            # Extract text using Tesseract
            extracted_text = extract_text_from_image(image_path)
            print(f"Extracted data from {filename}: \n{extracted_text}\n")

            # Extract transaction information using regex
            transaction_info = extract_transaction_data(extracted_text)
            print(transaction_info)
            #transaction_info["File"] = filename  # Optional: Add filename for reference

            # Add to list of all transactions
            all_transactions.append(transaction_info)

        except Exception as e:
            print(f"Failed to process {filename}: {e}")

# Save the extracted transaction data to a JSON file
output_json_path = "transactions_data.json"
with open(output_json_path, 'w') as json_file:
    json.dump(all_transactions, json_file, indent=4)

print(f"All data saved to {output_json_path}")
with open(output_json_path, 'w') as json_file:
    json.dump(all_transactions, json_file, indent=4)

print(f"All data saved to {output_json_path}")
